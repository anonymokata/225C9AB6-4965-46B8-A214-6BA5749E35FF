#include <string.h>
#include <stdio.h>
#include "../defs.h"
#include "../rpntools.h"
#include "../errors.h"

#test checkSanity_test
   resetErrors();
   checkSanity("(a+b)*(a^c)", INFIX_RULES);
   ck_assert_int_eq(getErrors(), 0);  /* no errors */

   resetErrors();
   checkSanity(")a-b(", INFIX_RULES);
   ck_assert_int_eq(getError(ERR_PARENTHESIS_UNBALANCED), 1);

   resetErrors();
   checkSanity("ab+", RPN_RULES);
   ck_assert_int_eq(getErrors(), 0);  /* no errors */

   resetErrors();
   checkSanity("(++)", RPN_RULES);  /* parenthesis not allowed in RPN! */
   ck_assert_int_eq(getError(ERR_INVALID_CHARACTER), TRUE);   


#test RPNtoInfix_test
   ck_assert_str_eq(RPNtoInfix("ab+"), "(a+b)");
   ck_assert_int_eq(getErrors(), 0);

   ck_assert_str_eq(RPNtoInfix("ag+ba-c+cedf^*+^*"), "((a+g)*(((b-a)+c)^(c+(e*(d^f)))))");
   ck_assert_int_eq(getErrors(), 0);

   ck_assert_str_eq(RPNtoInfix("ab+c*d^"), "(((a+b)*c)^d)");
   ck_assert_int_eq(getErrors(), 0);

   ck_assert_str_eq(RPNtoInfix("a+b"), "");
   ck_assert_int_eq(getError(ERR_UNBALANCED_EXPRESSION), TRUE);

   ck_assert_str_eq(RPNtoInfix("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa+++++++++++++++++++++++++++++++++++++++++++++++++"), "");
   ck_assert_int_eq(getError(ERR_STRING_TOO_LONG), TRUE);

   ck_assert_str_eq(RPNtoInfix("+ab"), "");
   ck_assert_int_eq(getError(ERR_UNBALANCED_EXPRESSION), TRUE);

   ck_assert_str_eq(RPNtoInfix("a++"), "");
   ck_assert_int_eq(getError(ERR_UNBALANCED_EXPRESSION), TRUE);

   ck_assert_str_eq(RPNtoInfix("++"), "");
   ck_assert_int_eq(getError(ERR_UNBALANCED_EXPRESSION), TRUE);

   /* parenthesis are invalid for RPN */
   ck_assert_str_eq(RPNtoInfix(")++("), "");
   ck_assert_int_eq(getError(ERR_INVALID_CHARACTER), TRUE);

   ck_assert_str_eq(RPNtoInfix("(++)"), "");  
   ck_assert_int_eq(getError(ERR_INVALID_CHARACTER), TRUE);


#test getRPN_test
   int pos=0;
   char stack[STACKSIZE][SMBUFFER];

   resetErrors();
   setStackWithString(stack, 0, "a+b*c");
   ck_assert_str_eq(getRPN(stack, 5), "abc*+");

   resetErrors();
   setStackWithString(stack, 0, "a+b*c*d*e^f+b");
   ck_assert_str_eq(getRPN(stack, 13), "abc*d*ef^*+b+");  

   resetErrors();
   setStackWithString(stack, 0, "+a+bb");
   ck_assert_str_eq(getRPN(stack, 5), "");  


#test InfixtoRPN_test
   ck_assert_str_eq(InfixtoRPN("(a+b)*(c+d)"), "ab+cd+*");
   ck_assert_str_eq(InfixtoRPN("a+b*c^f"), "abcf^*+");

   ck_assert_str_eq(InfixtoRPN("((a+(b*c*d(c-d))))"), "");
   ck_assert_int_eq(getError(ERR_UNBALANCED_EXPRESSION), TRUE);

   ck_assert_str_eq(InfixtoRPN("(a)"), "");
   ck_assert_int_eq(getError(ERR_UNBALANCED_EXPRESSION), TRUE);

   ck_assert_str_eq(InfixtoRPN("(++abb)"), "");
   ck_assert_int_eq(getError(ERR_UNBALANCED_EXPRESSION), TRUE);

   ck_assert_str_eq(InfixtoRPN("(+a+bb)"), "");
   ck_assert_int_eq(getError(ERR_UNBALANCED_EXPRESSION), TRUE);

   ck_assert_str_eq(InfixtoRPN("(bb+)"), "");
   ck_assert_int_eq(getError(ERR_UNBALANCED_EXPRESSION), TRUE);

   ck_assert_str_eq(InfixtoRPN("(bb+)*(b+c)*(-cd)"), "");
   ck_assert_int_eq(getError(ERR_UNBALANCED_EXPRESSION), TRUE);


   /* test cases from pillar examples */
   ck_assert_str_eq(InfixtoRPN("a+b-c"), "abc-+");
   ck_assert_str_eq(InfixtoRPN("(a+b)-c"), "ab+c-");
   ck_assert_str_eq(InfixtoRPN("a+b-c"), "abc-+");
   ck_assert_str_eq(InfixtoRPN("l/m^n*o-p"), "lmn^/o*p-");
   ck_assert_str_eq(InfixtoRPN("((l/(m^n))*o)-p"), "lmn^/o*p-");
   ck_assert_str_eq(InfixtoRPN("((v/w)^x)*(y-z)"), "vw/x^yz-*");

   /* test cases from http://www.spoj.com/problems/ONP/ (link provided by pillar) */
   ck_assert_str_eq(InfixtoRPN("3"), "");
   ck_assert_str_eq(InfixtoRPN("(a+(b*c))"), "abc*+");
   ck_assert_str_eq(InfixtoRPN("((a+b)*(z+x))"), "ab+zx+*");
   ck_assert_str_eq(InfixtoRPN("((a+t)*((b+(a+c))^(c+d)))"), "at+bac++cd+^*");
